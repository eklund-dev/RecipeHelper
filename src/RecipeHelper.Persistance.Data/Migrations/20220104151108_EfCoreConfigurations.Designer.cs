// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecipeHelper.Persistance.Data.Context;

#nullable disable

namespace RecipeHelper.Persistance.Data.Migrations
{
    [DbContext(typeof(RecipeHelperDbContext))]
    [Migration("20220104151108_EfCoreConfigurations")]
    partial class EfCoreConfigurations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IngredientsId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("IngredientRecipe");
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.CourseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastmodifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("CourseCategory", (string)null);
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.FavoriteRecipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastmodifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecipeUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecipeUserId");

                    b.ToTable("FavoriteRecipe");
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastmodifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Ingredient", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("852395a4-3aa4-4cdc-91cd-f0ce6340835e"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2022, 1, 4, 15, 11, 8, 365, DateTimeKind.Utc).AddTicks(3849),
                            Name = "Salt"
                        },
                        new
                        {
                            Id = new Guid("defd89d7-65fd-4aaa-932a-06da9661bdee"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2022, 1, 4, 15, 11, 8, 365, DateTimeKind.Utc).AddTicks(3853),
                            Name = "Peppar"
                        });
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CourseCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastmodifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Occasion")
                        .HasColumnType("int");

                    b.Property<int?>("RecipeFoodTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeFoodTypeId");

                    b.ToTable("Recipe", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("318c01ed-3f7a-4b21-9934-ce793d536673"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2022, 1, 4, 15, 11, 8, 365, DateTimeKind.Utc).AddTicks(8916),
                            Description = "n/a",
                            Difficulty = 1,
                            Duration = 0,
                            Name = "Kyckling ris & Curry",
                            Occasion = 0
                        });
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.RecipeFoodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastmodifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("RecipeFoodType", (string)null);
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.RecipeUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastmodifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("RecipeUser", (string)null);
                });

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.HasOne("RecipeHelper.Domain.Entities.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeHelper.Domain.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.FavoriteRecipe", b =>
                {
                    b.HasOne("RecipeHelper.Domain.Entities.RecipeUser", "RecipeUser")
                        .WithMany("FavoriteRecipes")
                        .HasForeignKey("RecipeUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecipeUser");
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.Recipe", b =>
                {
                    b.HasOne("RecipeHelper.Domain.Entities.CourseCategory", "CourseCategory")
                        .WithMany("Recipes")
                        .HasForeignKey("RecipeFoodTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RecipeHelper.Domain.Entities.RecipeFoodType", "RecipeFoodType")
                        .WithMany("Recipes")
                        .HasForeignKey("RecipeFoodTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CourseCategory");

                    b.Navigation("RecipeFoodType");
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.CourseCategory", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.RecipeFoodType", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.RecipeUser", b =>
                {
                    b.Navigation("FavoriteRecipes");
                });
#pragma warning restore 612, 618
        }
    }
}
