// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecipeHelper.Persistance.Data.Context;

#nullable disable

namespace RecipeHelper.Persistance.Data.Migrations
{
    [DbContext(typeof(RecipeHelperDbContext))]
    [Migration("20220210163621_Tbl_FavoriteRecipe_Change")]
    partial class Tbl_FavoriteRecipe_Change
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RecipeHelper.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastmodifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("009730f0-f81b-4ead-bd32-23e4f5746781"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2022, 2, 10, 16, 36, 21, 83, DateTimeKind.Utc).AddTicks(4025),
                            Name = "Simple and tasty"
                        });
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.FavoriteRecipe", b =>
                {
                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipeUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RecipeId", "RecipeUserId");

                    b.HasIndex("RecipeUserId");

                    b.ToTable("FavoriteRecipe", (string)null);
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.FoodType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastmodifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("FoodType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b755e2e-462c-4ed7-9319-6d11346285fe"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2022, 2, 10, 16, 36, 21, 83, DateTimeKind.Utc).AddTicks(8063),
                            Name = "Meat"
                        },
                        new
                        {
                            Id = new Guid("24f6f5e6-9a03-4510-bfbc-93cdcb135faf"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2022, 2, 10, 16, 36, 21, 83, DateTimeKind.Utc).AddTicks(8067),
                            Name = "Fish"
                        },
                        new
                        {
                            Id = new Guid("e019b04c-347a-4883-9cfb-e9b7fa960d88"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2022, 2, 10, 16, 36, 21, 83, DateTimeKind.Utc).AddTicks(8068),
                            Name = "Chicken"
                        },
                        new
                        {
                            Id = new Guid("64fe636f-d58b-4c94-bd4c-082cfad86c88"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2022, 2, 10, 16, 36, 21, 83, DateTimeKind.Utc).AddTicks(8070),
                            Name = "Vegatarian"
                        },
                        new
                        {
                            Id = new Guid("cf355479-2469-402d-b4dd-1de243f49244"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2022, 2, 10, 16, 36, 21, 83, DateTimeKind.Utc).AddTicks(8071),
                            Name = "Vegan"
                        });
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastmodifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Ingredient", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("126f8e03-15db-46ae-95a6-bacbd4f92760"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2022, 2, 10, 16, 36, 21, 83, DateTimeKind.Utc).AddTicks(9999),
                            Name = "Salt"
                        },
                        new
                        {
                            Id = new Guid("0e529c64-d5ae-4b86-86f5-4ac6981bbcc0"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2022, 2, 10, 16, 36, 21, 84, DateTimeKind.Utc).AddTicks(1),
                            Name = "Peppar"
                        });
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<Guid?>("FoodTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastmodifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TypeOfMeal")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfOccasion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodTypeId");

                    b.ToTable("Recipe", (string)null);
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.RecipeCategory", b =>
                {
                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RecipeId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("RecipeCategory", (string)null);
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.RecipeIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("IngredientAmountBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfPortionsBase")
                        .HasColumnType("int");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeIngredient", (string)null);
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.RecipeUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastmodifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("RecipeUser", (string)null);
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.FavoriteRecipe", b =>
                {
                    b.HasOne("RecipeHelper.Domain.Entities.Recipe", "Recipe")
                        .WithMany("FavoriteRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeHelper.Domain.Entities.RecipeUser", "RecipeUser")
                        .WithMany("FavoriteRecipes")
                        .HasForeignKey("RecipeUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("RecipeUser");
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.Recipe", b =>
                {
                    b.HasOne("RecipeHelper.Domain.Entities.FoodType", "FoodType")
                        .WithMany("Recipes")
                        .HasForeignKey("FoodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodType");
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.RecipeCategory", b =>
                {
                    b.HasOne("RecipeHelper.Domain.Entities.Category", "Category")
                        .WithMany("RecipeCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeHelper.Domain.Entities.Recipe", "Recipe")
                        .WithMany("RecipeCategories")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("RecipeHelper.Domain.Entities.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeHelper.Domain.Entities.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.Category", b =>
                {
                    b.Navigation("RecipeCategories");
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.FoodType", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.Ingredient", b =>
                {
                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.Recipe", b =>
                {
                    b.Navigation("FavoriteRecipes");

                    b.Navigation("RecipeCategories");

                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("RecipeHelper.Domain.Entities.RecipeUser", b =>
                {
                    b.Navigation("FavoriteRecipes");
                });
#pragma warning restore 612, 618
        }
    }
}
